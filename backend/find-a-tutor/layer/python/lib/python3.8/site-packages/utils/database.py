from contextlib import contextmanager

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import text

from utils import object_to_dict, formatter


class Database:
    def __init__(self, conn_string):
        self.db = create_engine(conn_string)

    @contextmanager
    def connect(self):
        try:
            connection = self.db.connect()
            yield connection
        except Exception as exc:
            print(exc)
        finally:
            connection.close()

    @contextmanager
    def session(self):
        """Provide a transactional scope around a series of operations."""
        Session = sessionmaker(self.db)
        session = Session()
        try:
            yield session
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()

    def create_session(self):
        Session = sessionmaker(self.db)
        return Session()

    def get_all(self, table, as_dict=False):
        with self.session() as session:
            elements = (
                [object_to_dict(result) for result in session.query(table)]
                if as_dict
                else [result for result in session.query(table)]
            )
            session.expunge_all()
            return elements

    def get(self, table, id, as_dict=False):
        with self.session() as session:
            element = session.query(table).get(id)
            session.expunge_all()
            if element and as_dict:
                return object_to_dict(element)
            elif element and not as_dict:
                return element
            return None

    def add(self, element):
        with self.session() as session:
            session.add(element)
            session.commit()
            session.refresh(element)
            session.expunge_all()

    def update(self, element):
        table = type(element)
        with self.session() as session:
            updated_element = session.query(table).get(element.id)
            mapped_values = {}
            for attribute in element.__dict__:
                if attribute not in ["_sa_instance_state", "id"]:
                    mapped_values[attribute] = element.__dict__.get(attribute)
            session.query(table).filter(table.id == element.id).update(mapped_values)
            session.commit()
            session.refresh(updated_element)
            session.expunge_all()
            return updated_element

    def delete(self, element):
        table = type(element)
        with self.session() as session:
            session.query(table).filter(table.id == element.id).delete(
                synchronize_session="evaluate"
            )

    def query(self, query, arguments=None):
        with self.connect() as connection:
            if arguments:
                result_set = connection.execute(text(query), **arguments)
                results_as_dict = [
                    {column: value for column, value in rowproxy.items()}
                    for rowproxy in result_set
                ]
            else:
                result_set = connection.execute(query)
                results_as_dict = [
                    {column: value for column, value in rowproxy.items()}
                    for rowproxy in result_set
                ]

            return formatter(results_as_dict)
